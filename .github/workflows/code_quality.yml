name: Code quality checks

# Run this workflow every time a new commit pushed to your repository
on:
  push:
    branches:
      - master
      - stable/*
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

jobs:
  ruff:
    name: Lint codebase with ruff (black, isort and flake8 alternative)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up backend environment
        uses: maykinmedia/setup-django-backend@v1.3
        with:
          apt-packages: 'libxml2 libxmlsec1 libxmlsec1-openssl gdal-bin'
          python-version: '3.12'
          setup-node: 'no'
      - run: |
          ruff check --output-format=github .

  migrations:
    name: Check for model changes not present in the migrations or default_admin_index fixture
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # Needed because the postgres container does not provide a healthcheck
        options:
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up backend environment
        uses: maykinmedia/setup-django-backend@v1.3
        with:
          apt-packages: 'libxml2 libxmlsec1 libxmlsec1-openssl gdal-bin'
          python-version: '3.12'
          setup-node: 'no'
      - name: Run manage.py makemigrations --check --dry-run
        run: |
          src/manage.py makemigrations --check --dry-run
        env:
          DJANGO_SETTINGS_MODULE: openforms.conf.ci
          DEBUG: 'true'
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_NAME: postgres
          DB_PASSWORD: ''
      - name: Load default_admin_index fixture and run manage.py check_admin_index
        run: |
          src/manage.py migrate
          src/manage.py loaddata default_admin_index
          src/manage.py check_admin_index
        env:
          DJANGO_SETTINGS_MODULE: openforms.conf.ci
          SECRET_KEY: dummy
          DB_USER: postgres
          DB_NAME: postgres
          DB_PASSWORD: ''

  dependencies:
    name: Lint dependencies
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Run linter
        run: python ./bin/lint_dependencies.py

  type-checking:
    name: Type checking (Pyright)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install additional dependencies
        run: |
          pip install uv
          uv pip install \
            --system \
            -r requirements/type-checking.txt
      - uses: jakebailey/pyright-action@v1
        with:
          version: 1.1.369
          project: pyright.pyproject.toml
