# Generated by Django 4.2.16 on 2024-11-25 15:32
from decimal import Decimal

from django.db import migrations
from django.db.migrations.state import StateApps

from openforms.forms.constants import LogicActionTypes
from openforms.variables.constants import FormVariableDataTypes, FormVariableSources

VARIABLE_NAME = "Total price"
VARIABLE_KEY = "totalPrice"


def _assignment_action(key: str, value: Decimal):
    return {
        "variable": key,
        "action": {
            "type": LogicActionTypes.variable,
            "value": str(value),
        },
    }


def convert_price_logic_rules_to_price_variable(apps: StateApps, _):
    """
    For each form that has price logic rules, create a variable to hold the price and
    add normal logic rules.
    """
    Form = apps.get_model("forms", "Form")
    forms_with_pricelogic = (
        Form.objects.filter(formpricelogic__isnull=False)
        .exclude(product__isnull=True)
        .distinct()
    )

    for form in forms_with_pricelogic.iterator():
        product = form.product
        rules = form.formpricelogic_set.all()

        # create a variable to hold the result.
        # TODO: handle possible key collissions
        price_variable = form.formvariable_set.create(
            form_definition=None,
            name=VARIABLE_NAME,
            key=VARIABLE_KEY,
            source=FormVariableSources.user_defined,
            data_type=FormVariableDataTypes.float,
        )
        form.price_variable_key = price_variable.key
        form.save()

        max_order = (
            last_rule.order
            if (last_rule := form.formlogic_set.order_by("order").last())
            else 0
        )

        # set up regular logic rules for each price logic rule
        for rule in rules:
            max_order += 1
            form.formlogic_set.create(
                description="Converted price logic rule",
                order=max_order,
                is_advanced=True,
                json_logic_trigger=rule.json_logic_trigger,
                actions=[_assignment_action(form.price_variable_key, rule.price)],
            )

        # create one fallback rule in case none of the triggers hit
        composite_negated_trigger = {
            "!": {"or": [rule.json_logic_trigger for rule in rules]}
        }
        max_order += 1
        form.formlogic_set.create(
            description="Converted price logic rule",
            order=max_order,
            is_advanced=True,
            json_logic_trigger=composite_negated_trigger,
            actions=[_assignment_action(form.price_variable_key, product.price)],
        )

        rules.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("forms", "0105_alter_form_all_submissions_removal_limit_and_more"),
    ]

    operations = [
        migrations.RunPython(
            convert_price_logic_rules_to_price_variable, migrations.RunPython.noop
        ),
    ]
